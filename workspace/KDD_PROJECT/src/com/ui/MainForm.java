/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ui;

import com.constant.GeneralConstant;
import com.kddcup.KddCupUtils;
import com.model.KddCupObject;
import com.model.ShortKddCupObject;
import com.model.ThresholdObject;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author Manh Son
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        prepareData = new javax.swing.JButton();
        generalRule = new javax.swing.JButton();
        resultClassify = new javax.swing.JButton();
        otherButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 22)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 0));
        jLabel1.setText("NGHIÊN CỨU ỨNG DỤNG KỸ THUẬT TẬP THÔ TRONG PHÂN LỚP DỮ LIỆU");

        prepareData.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        prepareData.setForeground(new java.awt.Color(0, 0, 153));
        prepareData.setText("TIỀN XỬ LÝ DỮ LIỆU");
        prepareData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prepareDataActionPerformed(evt);
            }
        });

        generalRule.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        generalRule.setForeground(new java.awt.Color(0, 0, 153));
        generalRule.setText("SINH LUẬT QUYẾT ĐỊNH");
        generalRule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generalRuleActionPerformed(evt);
            }
        });

        resultClassify.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        resultClassify.setForeground(new java.awt.Color(51, 0, 0));
        resultClassify.setText("KHÁC");

        otherButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        otherButton.setForeground(new java.awt.Color(0, 0, 102));
        otherButton.setText("KẾT QUẢ PHÂN LỚP");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(38, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(prepareData, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(otherButton, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generalRule, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resultClassify, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(69, 69, 69))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prepareData, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generalRule, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(93, 93, 93)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(otherButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resultClassify, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(128, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void prepareDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prepareDataActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.showOpenDialog(this);
        File file = fc.getSelectedFile();
        if (file == null) {
            System.out.println("Không chọn file");
            return;
        }
        List<ShortKddCupObject> shortKddCups = new ArrayList<ShortKddCupObject>();
        List<KddCupObject> kddCups = new ArrayList<KddCupObject>();
        List<String> services = new ArrayList<String>();
        ThresholdObject threshold = new ThresholdObject();
        Set<String> attack = new HashSet<String>();
        BufferedReader buffReader = null;
        try {
            buffReader = new BufferedReader(new InputStreamReader(
                    new FileInputStream(file),
                    GeneralConstant.ENCODING_UTF8));
            String token;
            while ((token = buffReader.readLine()) != null) {
                String[] parameters = token.split(",");
                if (parameters.length == 42) {
                    ShortKddCupObject shortKddCup = new ShortKddCupObject();
                    float count;
                    float srvSerrorRate;
                    float srvRerrorRate;
                    float dstHostCount;
                    float dstHostSameSrvRate;
                    float dstHostDiffSrvRate;

                    String service = parameters[2];
                    if (!services.contains(service)) {
                        services.add(service);
                    }
                    int index = services.indexOf(service);
                    shortKddCup.setService(index + "");

                    count = Float.parseFloat(parameters[22]);
                    threshold.setCount(count);
                    shortKddCup.setCount(count);

                    srvSerrorRate = Float.parseFloat(parameters[28]);
                    threshold.setSrvSerrorRate(srvSerrorRate);
                    shortKddCup.setSrvSerrorRate(srvSerrorRate);

                    srvRerrorRate = Float.parseFloat(parameters[29]);
                    threshold.setSrvRerrorRate(srvRerrorRate);
                    shortKddCup.setSrvRerrorRate(srvRerrorRate);

                    dstHostCount = Float.parseFloat(parameters[31]);
                    threshold.setDstHostCount(dstHostCount);
                    shortKddCup.setDstHostCount(dstHostCount);

                    dstHostSameSrvRate = Float.parseFloat(parameters[33]);
                    threshold.setDstHostSameSrvRate(dstHostSameSrvRate);
                    shortKddCup.setDstHostSameSrvRate(dstHostSameSrvRate);

                    dstHostDiffSrvRate = Float.parseFloat(parameters[34]);
                    threshold.setDstHostDiffSrvRate(dstHostDiffSrvRate);
                    shortKddCup.setDstHostDiffSrvRate(dstHostDiffSrvRate);

                    String label = parameters[41].replace(".", "");
                    attack.add(label);
                    if (GeneralConstant.LABELS.contains(label)) {
                        label = "1";
                    } else {
                        label = "0";
                    }
                    shortKddCup.setAttack(label);
                    shortKddCups.add(shortKddCup);
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (buffReader != null) {
                try {
                    buffReader.close();
                } catch (IOException ex) {
                    Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        // for (String ob : attack) {
        // System.out.println(ob);
        // }
        System.out.println("Min: " + threshold.getCountMin() + ", Max: "
                + threshold.getCountMax());
        System.out.println("Min: " + threshold.getSrvSerrorRateMin()
                + ", Max: " + threshold.getSrvSerrorRateMax());
        System.out.println("Min: " + threshold.getSrvRerrorRateMin()
                + ", Max: " + threshold.getSrvRerrorRateMax());
        System.out.println("Min: " + threshold.getDstHostCountMin() + ", Max: "
                + threshold.getDstHostCountMax());
        System.out.println("Min: " + threshold.getDstHostSameSrvRateMin()
                + ", Max: " + threshold.getDstHostSameSrvRateMax());
        System.out.println("Min: " + threshold.getDstHostDiffSrvRateMin()
                + ", Max: " + threshold.getDstHostDiffSrvRateMax());

        for (ShortKddCupObject ob : shortKddCups) {
            KddCupObject temp = new KddCupObject();
            temp.setX3(Integer.parseInt(ob.getService()));
            temp.setX23(KddCupUtils.getInstance().fetchUniNumber(
                    threshold.getCountMin(), threshold.getCountMax(),
                    GeneralConstant.NUMBER_OF_RANGES, ob.getCount()));
            temp.setX29(KddCupUtils.getInstance().fetchUniNumber(
                    threshold.getSrvSerrorRateMin(),
                    threshold.getSrvSerrorRateMax(),
                    GeneralConstant.NUMBER_OF_RANGES, ob.getSrvSerrorRate()));
            temp.setX30(KddCupUtils.getInstance().fetchUniNumber(
                    threshold.getSrvRerrorRateMin(),
                    threshold.getSrvRerrorRateMax(),
                    GeneralConstant.NUMBER_OF_RANGES, ob.getSrvRerrorRate()));
            temp.setX32(KddCupUtils.getInstance().fetchUniNumber(
                    threshold.getDstHostCountMin(),
                    threshold.getDstHostCountMax(),
                    GeneralConstant.NUMBER_OF_RANGES, ob.getDstHostCount()));
            temp.setX34(KddCupUtils.getInstance().fetchUniNumber(
                    threshold.getDstHostSameSrvRateMin(),
                    threshold.getDstHostSameSrvRateMax(),
                    GeneralConstant.NUMBER_OF_RANGES,
                    ob.getDstHostSameSrvRate()));
            temp.setX35(KddCupUtils.getInstance().fetchUniNumber(
                    threshold.getDstHostDiffSrvRateMin(),
                    threshold.getDstHostDiffSrvRateMax(),
                    GeneralConstant.NUMBER_OF_RANGES,
                    ob.getDstHostDiffSrvRate()));
            temp.setX42(Integer.parseInt(ob.getAttack()));
            kddCups.add(temp);
        }
        Map<String, Integer> ruleMap = new HashMap<String, Integer>();
        Map<String, Integer> ruleIfMap = new HashMap<String, Integer>();
        Map<String, Integer> ruleThenMap = new HashMap<String, Integer>();
        FileWriter writer = null;
        try {
            writer = new FileWriter(
                    GeneralConstant.INPUT_KDD_CUP_10_PERCENT_8_PARAMESTER);
            for (KddCupObject ob : kddCups) {
                String key = ob.toRule();
                KddCupUtils.getInstance().putKeyIntoMap(ruleMap, key);

                String keyIf = ob.toRuleIf();
                KddCupUtils.getInstance().putKeyIntoMap(ruleIfMap, keyIf);

                String keyThen = ob.toRuleThen();
                KddCupUtils.getInstance().putKeyIntoMap(ruleThenMap, keyThen);

                writer.write(ob.toString() + "\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (writer != null) {
                try {
                    writer.close();
                } catch (IOException ex) {
                    Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_prepareDataActionPerformed

    private void generalRuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generalRuleActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_generalRuleActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton generalRule;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton otherButton;
    private javax.swing.JButton prepareData;
    private javax.swing.JButton resultClassify;
    // End of variables declaration//GEN-END:variables
}
